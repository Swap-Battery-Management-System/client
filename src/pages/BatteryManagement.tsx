import { useEffect, useMemo, useState } from "react";
import {
  FaSearch,
  FaEdit,
  FaSave,
  FaTimes,
  FaTrash,
  FaPlus,
} from "react-icons/fa";
import { useAuth } from "@/context/AuthContext";
import api from "@/lib/api";
import type { Battery } from "@/types/battery";
import type { BatteryType } from "@/types/batteryType";
import { useStation } from "@/context/StationContext";
import { toast } from "sonner";

interface NewBattery {
  code: string;
  batteryTypeId: string;
  currentCapacity?: number;
  soc?: number;
  cycleCount?: number;
  status: string;
  stationId: string;
  manufacturedAt: string;
}

export default function BatteryManagement() {
  const { user } = useAuth();
  const role = user?.role.name;

  const [batteries, setBatteries] = useState<Battery[]>([]);
  const [batteryTypes, setBatteryTypes] = useState<BatteryType[]>([]);
  const { fetchAllStation, stations = [] } = useStation();

  const [searchId, setSearchId] = useState("");
  const [filterType, setFilterType] = useState("");
  const [filterStatus, setFilterStatus] = useState("");
  const [filterStation, setFilterStation] = useState("all");
  const [editingBattery, setEditingBattery] = useState<Battery | null>(null);

  //them pin
  const [showAddForm, setShowAddForm] = useState(false);
  const [newBattery, setNewBattery] = useState<NewBattery>({
    code: "",
    batteryTypeId: "",
    currentCapacity: undefined,
    soc: undefined,
    cycleCount: undefined,
    status: "",
    stationId: "",
    manufacturedAt: "",
  });

  // Ph√¢n trang
  const [page, setPage] = useState(1);
  const ITEMS_PER_PAGE = 15;

  // Fetch d·ªØ li·ªáu pin & lo·∫°i pin
  const fetchBatteries = async () => {
    try {
      const res = await api.get("/batteries", { withCredentials: true });
      setBatteries(res.data.data);
      console.log("battery",res.data);
    } catch (err) {
      console.error("L·ªói l·∫•y danh s√°ch pin:", err);
    }
  };

  const fetchBatteryTypes = async () => {
    try {
      const res = await api.get("/battery-types", { withCredentials: true });
      setBatteryTypes(res.data.data.batteryTypes);
    } catch (err) {
      console.error("L·ªói l·∫•y danh s√°ch lo·∫°i pin:", err);
    }
  };
}


// Ki·ªÉu d·ªØ li·ªáu Tr·∫°m
interface Station {
  id: string;
  name: string;
  address: string;
  status: string;
  slotCapacity?: number;
  batteries: Battery[];
}

// Map tr·∫°ng th√°i pin ‚Üí hi·ªÉn th·ªã
const statusMap = {
  available: { label: "C√≥ th·ªÉ d√πng", textColor: "text-green-700", bgColor: "bg-green-100", boldColor: "text-green-800" },
  in_charged: { label: "ƒêang s·∫°c", textColor: "text-blue-700", bgColor: "bg-blue-100", boldColor: "text-blue-800" },
  reserved: { label: "ƒê∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc", textColor: "text-purple-700", bgColor: "bg-purple-100", boldColor: "text-purple-800" },
  in_use: { label: "ƒêang s·ª≠ d·ª•ng", textColor: "text-yellow-700", bgColor: "bg-yellow-100", boldColor: "text-yellow-800" },
  faulty: { label: "Pin l·ªói", textColor: "text-red-700", bgColor: "bg-red-100", boldColor: "text-red-800" },
};

export default function BatteryManagement() {
  const { user } = useAuth();
  const [station, setStation] = useState<Station | null>(null);
  const [loading, setLoading] = useState(true);

  const [searchCode, setSearchCode] = useState(""); // t√¨m ki·∫øm theo m√£ pin
  const [filterStatus, setFilterStatus] = useState<Battery["status"] | "all">("all"); // l·ªçc tr·∫°ng th√°i

  const getStatusText = (status: Battery["status"]) => statusMap[status]?.label || "Kh√¥ng x√°c ƒë·ªãnh";
  const getStatusClass = (status: Battery["status"]) => statusMap[status]?.textColor || "text-gray-600";

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        //  L·∫•y tr·∫°m
        const stationRes = await api.get("/stations", { withCredentials: true });
        const stationData: Station = stationRes.data.data.stations;

        if (!stationData) {
          toast.error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu tr·∫°m!");
          setStation(null);
          return;
        }

        //  L·∫•y danh s√°ch pin ƒë·∫ßy ƒë·ªß (c√≥ batteryType)
        const batteriesRes = await api.get("/batteries", { withCredentials: true });
        const batteries: Battery[] = batteriesRes.data.data ?? [];

        //  L·ªçc pin thu·ªôc tr·∫°m hi·ªán t·∫°i
        const stationBatteries = batteries.filter(b => b.stationId === stationData.id);

        setStation({ ...stationData, batteries: stationBatteries });
      } catch (error: any) {
        console.error("L·ªói fetch d·ªØ li·ªáu:", error);
        toast.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu tr·∫°m ho·∫∑c pin!");
        setStation(null);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);


  return (
    <div className="p-8 bg-[#E9F8F8] min-h-screen">
      <h1 className="text-4xl text-center font-bold mb-10 text-[#2C8C8E]">Qu·∫£n L√Ω Pin T·∫°i Tr·∫°m</h1>

      {loading && <p className="text-center text-gray-500">ƒêang t·∫£i...</p>}

      {!loading && !station && (
        <p className="text-center text-red-500 font-semibold">Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu tr·∫°m.</p>
      )}

      {!loading && station && (
        <>
          <Card className="p-6 mb-10 shadow-lg bg-white text-center border border-gray-200">
            <h2 className="text-2xl font-bold text-[#007577]">{station.name}</h2>
            {station.address && <p className="text-gray-600 mt-1 font-medium">üìç {station.address}</p>}
            {station.status && (
              <p className="mt-2 font-semibold text-gray-700">
                Tr·∫°ng th√°i: <span className="text-green-700 uppercase">{station.status}</span>
              </p>
            )}
            {station.slotCapacity !== undefined && (
              <p className="mt-1 text-gray-700 font-medium">Slot: {station.slotCapacity} </p>
            )}

            {/* T·ªïng quan s·ªë l∆∞·ª£ng pin */}
            <div className="grid grid-cols-2 md:grid-cols-5 gap-5 mt-6 text-sm font-medium">
              {Object.keys(statusMap).map(key => {
                const k = key as Battery["status"];
                return (
                  <div key={k} className={`${statusMap[k].bgColor} p-3 rounded-lg`}>
                    <p className={statusMap[k].textColor}>{statusMap[k].label}</p>
                    <p className={`font-bold text-lg ${statusMap[k].boldColor}`}>
                      {(station.batteries || []).filter(b => b.status === k).length}
                    </p>
                  </div>
                );
              })}
            </div>

            <p className="mt-4 text-gray-900 font-bold">üì¶ T·ªïng s·ªë pin: {station.batteries?.length || 0}</p>
          </Card>

          {/* Danh s√°ch pin */}
          <h2 className="text-xl font-bold text-[#2C8C8E] mb-5">Danh S√°ch Pin</h2>
          <div className="overflow-x-auto rounded-lg shadow">
            <table className="min-w-full bg-white">
              <thead className="bg-[#2C8C8E] text-white">
                <tr>
                  <th className="py-3 px-4 text-left">M√£ Pin</th>
                  <th className="py-3 px-4 text-left">Lo·∫°i Pin</th>
                  <th className="py-3 px-4 text-left">Dung l∆∞·ª£ng</th>
                  <th className="py-3 px-4 text-left">SOC</th>
                  <th className="py-3 px-4 text-left">CycleCount</th>
                  <th className="py-3 px-4 text-left">Tr·∫°ng Th√°i</th>
                  <th className="py-3 px-4 text-center">Thao t√°c</th>
                </tr>
              </thead>
              <tbody>
                {(station.batteries || []).map(batt => (
                  <tr key={batt.id} className="border-b hover:bg-gray-50">
                    <td className="py-3 px-4 font-semibold">{batt.code}</td>
                    <td className="py-3 px-4">{batt.batteryType?.name || "-"}</td>
                    <td className="py-3 px-4">{batt.currentCapacity}</td>
                    <td className="py-3 px-4">{batt.soc}</td>
                    <td className="py-3 px-4">{batt.cycleCount}</td>
                    <td className={`py-3 px-4 font-semibold ${getStatusClass(batt.status)}`}>
                      {getStatusText(batt.status)}
                    </td>
                    <td className="py-3 px-4 text-center">
                      <Button variant="outline" size="sm">
                        Xem chi ti·∫øt
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </>
      )}

  useEffect(() => {
    fetchBatteries();
    fetchBatteryTypes();
    fetchAllStation();
  }, []);

  // T·∫°o map id ‚Üí t√™n tr·∫°m
  const stationMap = useMemo(() => {
    return Object.fromEntries(stations.map((s) => [s.id, s.name]));
  }, [stations]);

  // M√†u tr·∫°ng th√°i
  const getStatusColor = (status: string) => {
    switch (status) {
      case "available":
        return "text-green-600 font-semibold";
      case "in_use":
        return "text-orange-500 font-semibold";
      case "charging":
        return "text-blue-500 font-semibold";
      case "faulty":
        return "text-red-500 font-semibold";
      case "in_transit":
        return "text-purple-500 font-semibold";
      case "reserved":
        return "text-yellow-500 font-semibold";
      default:
        return "text-gray-500 font-semibold";
    }
  };

  // L·ªçc danh s√°ch pin
  const filteredList = batteries.filter((pin) => {
    const typeName = pin.batteryType?.name || "";
    const matchSearch = (pin.code || "")
      .toLowerCase()
      .includes(searchId.toLowerCase());
    const matchType = filterType ? typeName === filterType : true;
    const matchStatus = filterStatus ? pin.status === filterStatus : true;
    const matchStation =
      filterStation === "all" ? true : pin.stationId === filterStation;
    return matchSearch && matchType && matchStatus && matchStation;
  });

  // T√≠nh ph√¢n trang
  const totalPages = Math.ceil(filteredList.length / ITEMS_PER_PAGE) || 1;
  const currentPageData = filteredList.slice(
    (page - 1) * ITEMS_PER_PAGE,
    page * ITEMS_PER_PAGE
  );

  // L∆∞u c·∫≠p nh·∫≠t pin
  const handleSave = async () => {
    if (!editingBattery) return;
    try {
      const updatedData = {
        code: editingBattery.code,
        currentCapacity: editingBattery.currentCapacity,
        manufacturedAt: new Date(editingBattery.manufacturedAt).toISOString(), // gi·ªØ ƒë√∫ng format yyyy-mm-dd
        cycleCount: editingBattery.cycleCount,
        soc: editingBattery.soc,
        status: editingBattery.status,
        batteryTypeId: editingBattery.batteryType?.id, // l·∫•y id t·ª´ object
        stationId: editingBattery.stationId,
      };

      await api.patch(`/batteries/${editingBattery.id}`, updatedData, {
        withCredentials: true,
      });
      toast.success("C·∫≠p nh·∫≠t pin th√†nh c√¥ng!");
      setEditingBattery(null);
      fetchBatteries();
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t pin:", err);
      toast.error("Kh√¥ng th·ªÉ l∆∞u thay ƒë·ªïi!");
    }
  };

  const handleAddBattery = async () => {
    // C√°c tr∆∞·ªùng b·∫Øt bu·ªôc (tr·ª´ status)
    const requiredFields: (keyof NewBattery)[] = [
      "code",
      "currentCapacity",
      "manufacturedAt",
      "cycleCount",
      "soc",
      "batteryTypeId",
      "stationId",
    ];

    // Ki·ªÉm tra tr∆∞·ªùng n√†o b·ªã thi·∫øu
    const missingFields = requiredFields.filter(
      (field) => !newBattery[field] && newBattery[field] !== 0
    );

    if (missingFields.length > 0) {
      alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ th√¥ng tin.");
      return;
    }

    const batteryToAdd = {
      ...newBattery,
      status: newBattery.status?.trim() || "available", // M·∫∑c ƒë·ªãnh available
    };
    try {
      // setLoading(true);
      const res = await api.post("/batteries", batteryToAdd, {
        withCredentials: true,
      });
      const added = res.data.data.battery;
      console.log(res.data);
      // C·∫≠p nh·∫≠t danh s√°ch pin
      setBatteries((prev) => [...prev, added]);

      // Reset form
      setNewBattery({
        code: "",
        batteryTypeId: "",
        currentCapacity: 0,
        soc: 0,
        cycleCount: 0,
        status: "",
        stationId: "",
        manufacturedAt: "",
      });

      setShowAddForm(false);
      toast.success(" Th√™m pin m·ªõi th√†nh c√¥ng!");
    } catch (error: any) {
      console.error("Error adding battery:", error);
      if (error.response) {
        const status = error.response.status;
        switch (status) {
          case 400:
            toast.error(" D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c m√£ pin ƒë√£ t·ªìn t·∫°i.");
            break;
          case 401:
            toast.error("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c phi√™n ƒë√£ h·∫øt h·∫°n.");
            break;
          case 403:
            toast.error(" B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.");
            break;
          case 404:
            toast.error(" Kh√¥ng t√¨m th·∫•y endpoint ho·∫∑c d·ªØ li·ªáu li√™n quan.");
            break;
          case 500:
            toast.error(" L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.");
            break;
          default:
            toast.error(`L·ªói kh√¥ng x√°c ƒë·ªãnh (m√£ ${status}).`);
        }
      } else {
        toast.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra m·∫°ng.");
      }
    } finally {
      // setLoading(false);
    }
  };
  const handleDelete = async (id: string) => {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a pin n√†y kh√¥ng?")) return;
    try {
      await api.delete(`batteries/${id}`);
      toast.success("X√≥a pin th√†nh c√¥ng!");
      fetchBatteries();
    } catch {
      toast.error("L·ªói khi x√≥a pin!");
    }
  };

  const markFaulty = async (id: string) => {
    try {
      await api.patch(
        `/batteries/${id}`,
        { status: "faulty" },
        { withCredentials: true }
      );
      toast.info("ƒê√£ ƒë√°nh d·∫•u pin l·ªói!");
      fetchBatteries();
    } catch (err: any) {
      toast.error("Kh√¥ng th·ªÉ ƒë√°nh d·∫•u l·ªói!");
      console.log("kh√¥ng ƒë√°nh d·∫•u l·ªói ƒë∆∞·ª£c", err);
    }
  };

  return (
    <div className="p-6 space-y-6 min-h-screen">
      <h2 className="text-center text-2xl font-bold text-[#38A3A5]">
        Qu·∫£n l√Ω Pin
      </h2>

      {/* Thanh t√¨m ki·∫øm & l·ªçc */}
      <div className="flex items-center gap-2 flex-wrap p-4">
        <div className="relative flex-1 max-w-xs">
          <input
            type="text"
            value={searchId}
            onChange={(e) => setSearchId(e.target.value)}
            placeholder="Nh·∫≠p m√£ pin..."
            className="border rounded pl-8 pr-2 py-1 w-full text-sm focus:outline-none focus:ring-2 focus:ring-green-300"
          />
          <FaSearch className="absolute left-2 top-1/2 -translate-y-1/2 text-gray-400" />
        </div>

        {/* L·ªçc lo·∫°i pin */}
        <select
          value={filterType}
          onChange={(e) => setFilterType(e.target.value)}
          className="border rounded px-2 py-1 text-sm focus:ring-2 focus:ring-green-300"
        >
          <option value="">Lo·∫°i pin</option>
          {batteryTypes.map((bt) => (
            <option key={bt.id} value={bt.name}>
              {bt.name}
            </option>
          ))}
        </select>

        {/* L·ªçc tr·∫°ng th√°i */}
        <select
          value={filterStatus}
          onChange={(e) => setFilterStatus(e.target.value)}
          className="border rounded px-2 py-1 text-sm focus:ring-2 focus:ring-green-200"
        >
          <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
          <option value="available">available</option>
          <option value="in_use">in_use</option>
          <option value="in_charged">in_charged</option>
          <option value="in_transit">in_transit</option>
          <option value="faulty">faulty</option>
          <option value="reserved">reserved</option>
        </select>

        {role === "admin" && (
          <>
            {/* L·ªçc theo tr·∫°m */}
            <select
              value={filterStation}
              onChange={(e) => setFilterStation(e.target.value)}
              className="border rounded px-2 py-1 text-sm focus:ring-2 focus:ring-green-200"
            >
              <option value="all">T·∫•t c·∫£ tr·∫°m</option>
              {stations.map((st) => (
                <option key={st.id} value={st.id}>
                  {st.name}
                </option>
              ))}
            </select>
          </>
        )}

        <button
          onClick={() => {
            setSearchId("");
            setFilterType("");
            setFilterStatus("");
            setFilterStation("all");
          }}
          className="bg-[#38A3A5] text-white px-3 py-1 rounded hover:bg-[#246B45] text-sm"
        >
          L√†m m·ªõi
        </button>

        {role === "admin" && (
          <button
            onClick={() => setShowAddForm(!showAddForm)}
            className="bg-green-600 text-white px-3 py-1 rounded text-sm flex items-center gap-1"
          >
            <FaPlus /> {showAddForm ? "ƒê√≥ng" : "Th√™m pin"}
          </button>
        )}
      </div>

      {/* Form th√™m pin */}
      {showAddForm && (
        <div className="border p-4 rounded-md bg-[#F8FFFD]">
          <h3 className="font-semibold mb-3 text-[#38A3A5]">Th√™m pin m·ªõi</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {/* M√£ pin */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                M√£ pin
              </label>
              <input
                placeholder="Nh·∫≠p m√£ pin"
                value={newBattery.code}
                onChange={(e) =>
                  setNewBattery({ ...newBattery, code: e.target.value })
                }
                className="border rounded px-2 py-1 w-full text-sm"
              />
            </div>

            {/* Lo·∫°i pin */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Lo·∫°i pin
              </label>
              <select
                value={newBattery.batteryTypeId}
                onChange={(e) =>
                  setNewBattery({
                    ...newBattery,
                    batteryTypeId: e.target.value,
                  })
                }
                className="border rounded px-2 py-1 w-full text-sm"
              >
                <option value="">Ch·ªçn lo·∫°i pin</option>
                {batteryTypes.map((bt) => (
                  <option key={bt.id} value={bt.id}>
                    {bt.name}
                  </option>
                ))}
              </select>
            </div>

            {/* Tr·∫°m */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tr·∫°m
              </label>
              <select
                value={newBattery.stationId}
                onChange={(e) =>
                  setNewBattery({ ...newBattery, stationId: e.target.value })
                }
                className="border rounded px-2 py-1 w-full text-sm"
              >
                <option value="">Ch·ªçn tr·∫°m</option>
                {stations.map((st) => (
                  <option key={st.id} value={st.id}>
                    {st.name}
                  </option>
                ))}
              </select>
            </div>

            {/* Dung l∆∞·ª£ng hi·ªán t·∫°i */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Dung l∆∞·ª£ng hi·ªán t·∫°i (mAh)
              </label>
              <input
                type="number"
                placeholder="Nh·∫≠p s·ªë dung l∆∞·ª£ng"
                value={newBattery.currentCapacity ?? ""}
                onChange={(e) => {
                  const value =
                    e.target.value === "" ? undefined : Number(e.target.value);
                  if (value !== undefined && value < 0) return;
                  setNewBattery({ ...newBattery, currentCapacity: value });
                }}
                className="border rounded px-2 py-1 w-full text-sm"
              />
            </div>

            {/* S·ªë chu k·ª≥ s·∫°c */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                S·ªë chu k·ª≥ s·∫°c
              </label>
              <input
                type="number"
                placeholder="Nh·∫≠p s·ªë chu k·ª≥"
                value={newBattery.cycleCount ?? ""}
                onChange={(e) => {
                  const value =
                    e.target.value === "" ? undefined : Number(e.target.value);
                  if (value !== undefined && value < 0) return;
                  setNewBattery({ ...newBattery, cycleCount: value });
                }}
                className="border rounded px-2 py-1 w-full text-sm"
              />
            </div>

            {/* SOC */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                SOC (%)
              </label>
              <input
                type="number"
                placeholder="Nh·∫≠p SOC (0‚Äì100)"
                value={newBattery.soc ?? ""}
                onChange={(e) => {
                  const value =
                    e.target.value === "" ? undefined : Number(e.target.value);
                  if (value !== undefined && (value < 0 || value > 100)) return; // ch·ªâ cho 0‚Äì100
                  setNewBattery({ ...newBattery, soc: value });
                }}
                className="border rounded px-2 py-1 w-full text-sm"
              />
            </div>

            {/* Ng√†y s·∫£n xu·∫•t */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Ng√†y s·∫£n xu·∫•t
              </label>
              <input
                type="date"
                max={
                  new Date(Date.now() - new Date().getTimezoneOffset() * 60000)
                    .toISOString()
                    .split("T")[0]
                }
                value={newBattery.manufacturedAt}
                onChange={(e) => {
                  const selected = e.target.value;
                  const today = new Date().toISOString().split("T")[0];

                  if (selected > today) {
                    alert("Kh√¥ng th·ªÉ ch·ªçn ng√†y trong t∆∞∆°ng lai!");
                    return; // Kh√¥ng c·∫≠p nh·∫≠t state
                  }

                  setNewBattery({
                    ...newBattery,
                    manufacturedAt: selected,
                  });
                }}
                className="border rounded px-2 py-1 w-full text-sm"
              />
            </div>

            {/* Tr·∫°ng th√°i */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tr·∫°ng th√°i
              </label>
              <select
                value={newBattery.status || "available"}
                onChange={(e) =>
                  setNewBattery({ ...newBattery, status: e.target.value })
                }
                className="border rounded px-2 py-1 w-full text-sm"
              >
                <option value="available">available</option>
                <option value="in_use">in_use</option>
                <option value="in_charged">in_charged</option>
                <option value="in_transit">in_transit</option>
                <option value="faulty">faulty</option>
                <option value="reserved">reserved</option>
              </select>
            </div>
          </div>

          {/* N√∫t l∆∞u */}
          <div className="mt-4 flex justify-end">
            <button
              disabled={
                !newBattery.code.trim() ||
                !newBattery.batteryTypeId ||
                !newBattery.stationId ||
                newBattery.currentCapacity === undefined ||
                newBattery.cycleCount === undefined ||
                newBattery.soc === undefined ||
                !newBattery.manufacturedAt
              }
              onClick={() => handleAddBattery()}
              className={`px-4 py-1 rounded text-sm text-white transition ${
                !newBattery.code ||
                !newBattery.batteryTypeId ||
                !newBattery.stationId ||
                newBattery.currentCapacity === undefined ||
                newBattery.cycleCount === undefined ||
                newBattery.soc === undefined ||
                !newBattery.manufacturedAt
                  ? "bg-gray-400 cursor-not-allowed"
                  : "bg-[#38A3A5] hover:bg-[#2C7A7B]"
              }`}
            >
              L∆∞u pin m·ªõi
            </button>
          </div>
        </div>
      )}

      {/* B·∫£ng hi·ªÉn th·ªã pin */}
      <p className="text-gray-600 text-right">
        T·ªïng s·ªë pin:{" "}
        <span className="font-medium text-[#38A3A5] ">
          {filteredList.length}
        </span>
      </p>

      <table className="min-w-full table-auto text-center border-collapse">
        <thead className="bg-[#E6F7F7] text-[#38A3A5]">
          <tr>
            {[
              "STT",
              "M√£ Pin",
              "Lo·∫°i Pin",
              "Dung l∆∞·ª£ng",
              "SoC",
              "Chu k·ª≥",
              "Tr·∫°ng th√°i",
              "Tr·∫°m",
              "Ng√†y SX",
              "H√†nh ƒë·ªông",
            ].map((h) => (
              <th key={h} className="border px-2 py-1">
                {h}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {currentPageData.map((pin, idx) => {
          const isEditing = editingBattery?.id === pin.id;
            const date = pin.manufacturedAt?.split("T")[0];

            return (
              <tr key={pin.id} className="border-b hover:bg-gray-100">
                <td>{(page - 1) * ITEMS_PER_PAGE + idx + 1}</td>
                <td>
                  {isEditing ? (
                    <input
                      value={editingBattery.code}
                      onChange={(e) =>
                        setEditingBattery({
                          ...editingBattery,
                          code: e.target.value,
                        })
                      }
                      className="border rounded px-2 py-1 w-24 text-sm"
                    />
                  ) : (
                    pin.code
                  )}
                </td>

                <td>
                  {isEditing ? (
                    <select
                      value={editingBattery.batteryType?.id || ""}
                      onChange={(e) => {
                        const selected = batteryTypes.find(
                          (bt) => bt.id === e.target.value
                        );
                        if (selected)
                          setEditingBattery({
                            ...editingBattery,
                            batteryType: selected,
                          });
                      }}
                      className="border rounded px-2 py-1 text-sm"
                    >
                      {batteryTypes.map((bt) => (
                        <option key={bt.id} value={bt.id}>
                          {bt.name}
                        </option>
                      ))}
                    </select>
                  ) : (
                    pin.batteryType?.name
                  )}
                </td>

                <td>
                  {isEditing ? (
                    <input
                      type="number"
                      min={0}
                      value={editingBattery.currentCapacity}
                      onChange={(e) =>
                        setEditingBattery({
                          ...editingBattery,
                          currentCapacity: Number(e.target.value),
                        })
                      }
                      className="border rounded px-2 py-1 w-24 text-sm"
                    />
                  ) : (
                    pin.currentCapacity
                  )}
                </td>

                <td>
                  {isEditing ? (
                    <input
                      type="number"
                      value={editingBattery.soc}
                      min={0}
                      onChange={(e) =>
                        setEditingBattery({
                          ...editingBattery,
                          soc: Number(e.target.value),
                        })
                      }
                      className="border rounded px-2 py-1 w-16 text-sm"
                    />
                  ) : (
                    `${pin.soc}%`
                  )}
                </td>

                <td>
                  {isEditing ? (
                    <input
                      type="number"
                      min={0}
                      value={editingBattery.cycleCount}
                      onChange={(e) =>
                        setEditingBattery({
                          ...editingBattery,
                          cycleCount: Number(e.target.value),
                        })
                      }
                      className="border rounded px-2 py-1 w-16 text-sm"
                    />
                  ) : (
                    pin.cycleCount
                  )}
                </td>

                <td>
                  {isEditing ? (
                    (() => {
                      const current = editingBattery.status;

                      // Quy ƒë·ªãnh chuy·ªÉn tr·∫°ng th√°i ƒë∆∞·ª£c ph√©p
                      const allowedTransitions: Record<string, string[]> = {
                        available: [
                          "in_use",
                          "in_transit",
                          "faulty",
                          "reserved",
                        ],
                        in_use: ["in_charged", "faulty"],
                        in_charged: ["available", "faulty"],
                        in_transit: ["available", "faulty"],
                        faulty: ["available"],
                        reserved: ["available", "in_use", "faulty"], // Kh√¥ng c√≥ in_transit
                      };

                      // L·∫•y danh s√°ch tr·∫°ng th√°i cho ph√©p, g·ªìm c·∫£ current (ƒë·ªÉ hi·ªÉn th·ªã)
                      const allowedStatuses = [
                        current,
                        ...(allowedTransitions[current] || []),
                      ].filter((v, i, a) => a.indexOf(v) === i); // unique

                      return (
                        <select
                          value={editingBattery.status}
                          onChange={(e) =>
                            setEditingBattery({
                              ...editingBattery,
                              status: e.target.value,
                            })
                          }
                          className="border rounded px-2 py-1 text-sm"
                        >
                          {allowedStatuses.map((status) => (
                            <option key={status} value={status}>
                              {status}
                            </option>
                          ))}
                        </select>
                      );
                    })()
                  ) : (
                    <span className={getStatusColor(pin.status)}>
                      {pin.status}
                    </span>
                  )}
                </td>

                <td>
                  {isEditing ? (
                    <select
                      value={editingBattery.stationId}
                      onChange={(e) =>
                        setEditingBattery({
                          ...editingBattery,
                          stationId: e.target.value,
                        })
                      }
                      className="border rounded px-2 py-1 text-sm"
                    >
                      {stations.map((st) => (
                        <option key={st.id} value={st.id}>
                          {st.name}
                        </option>
                      ))}
                    </select>
                  ) : (
                    stationMap[pin.stationId] || "Kh√¥ng x√°c ƒë·ªãnh"
                  )}
                </td>

                <td>
                  {isEditing ? (
                    <input
                      type="date"
                      value={
                        editingBattery.manufacturedAt
                          ? new Date(
                              editingBattery.manufacturedAt
                            ).toLocaleString("vi-VN")
                          : "Ch∆∞a c√≥"
                      }
                      onChange={(e) =>
                        setEditingBattery({
                          ...editingBattery,
                          manufacturedAt: e.target.value,
                        })
                      }
                      className="border rounded px-2 py-1 text-sm"
                    />
                  ) : (
                    date
                  )}
                </td>

                <td>
                  {isEditing ? (
                    <div className="flex justify-center gap-2">
                      <button
                        onClick={handleSave}
                        className="text-green-600 flex items-center gap-1"
                      >
                        <FaSave /> L∆∞u
                      </button>
                      <button
                        onClick={() => setEditingBattery(null)}
                        className="text-gray-500 flex items-center gap-1"
                      >
                        <FaTimes /> H·ªßy
                      </button>
                    </div>
                  ) : (
                    <div className="flex justify-center gap-2">
                      {role === "admin" && (
                        <>
                          <button
                            onClick={() => setEditingBattery(pin)}
                            className="text-blue-500 flex items-center gap-1"
                          >
                            <FaEdit /> S·ª≠a
                          </button>
                          <button
                            onClick={() => handleDelete(pin.id)}
                            className="text-red-600 flex items-center gap-1"
                          >
                            <FaTrash /> X√≥a
                          </button>
                        </>
                      )}
                      {role === "staff" && (
                        <button
                          onClick={() => markFaulty(pin.id)}
                          className="text-orange-500 flex items-center gap-1"
                        >
                          <FaTimes /> ƒê√°nh d·∫•u l·ªói
                        </button>
                      )}
                    </div>
                  )}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>

      {/* Ph√¢n trang */}
      <div className="flex justify-center items-center gap-4 mt-4">
        <button
          disabled={page === 1}
          onClick={() => setPage((p) => p - 1)}
          className="px-3 py-1 border rounded text-sm disabled:opacity-50"
        >
          Tr∆∞·ªõc
        </button>
        <span>
          Trang {page} / {totalPages}
        </span>
        <button
          disabled={page === totalPages}
          onClick={() => setPage((p) => p + 1)}
          className="px-3 py-1 border rounded text-sm disabled:opacity-50"
        >
          Sau
        </button>
      </div>

    </div>
  );
}

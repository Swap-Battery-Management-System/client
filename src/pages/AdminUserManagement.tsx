import { useState, useEffect } from "react";
import { FaSearch } from "react-icons/fa";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import api from "@/lib/api";
import { toast } from "sonner";

export default function AdminUserManagement() {
    const [searchTerm, setSearchTerm] = useState("");
    const [users, setUsers] = useState<any[]>([]);
    const [selectedUser, setSelectedUser] = useState<any>(null);
    const [loading, setLoading] = useState(false);

    // ==========================
    // üß≠ 1. L·∫•y to√†n b·ªô users
    // ==========================
    const fetchUsers = async () => {
        try {
            setLoading(true);
            const res = await api.get("/users");

            // ‚úÖ L·∫•y m·∫£ng user ƒë√∫ng v·ªã tr√≠: data.data.users
            const list = Array.isArray(res.data.data?.users)
                ? res.data.data.users
                : [];

            setUsers(list);
        } catch (err: any) {
            console.error("Fetch users error:", err);
            toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng ‚ùå");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchUsers();
    }, []);

    // ==========================
    // üóëÔ∏è 2. Xo√° user
    // ==========================
    const handleDelete = async (id: string) => {
        if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° ng∆∞·ªùi d√πng n√†y?")) return;
        try {
            await api.delete(`/users/${id}`);
            toast.success("ƒê√£ xo√° ng∆∞·ªùi d√πng th√†nh c√¥ng ‚úÖ");
            setUsers((prev) => prev.filter((u) => u.id !== id));
        } catch (err) {
            toast.error("Xo√° ng∆∞·ªùi d√πng th·∫•t b·∫°i ‚ùå");
        }
    };

    // ==========================
    // ‚úèÔ∏è 3. C·∫≠p nh·∫≠t th√¥ng tin user (PATCH /users/complete)
    // ==========================
    const handleUpdateProfile = async (id: string) => {
        const newName = prompt("Nh·∫≠p t√™n m·ªõi:");
        if (!newName) return;
        try {
            await api.patch("/users/complete", {
                fullName: newName,
            });
            toast.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            fetchUsers();
        } catch (err) {
            toast.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t h·ªì s∆° ‚ùå");
        }
    };

    // ==========================
    // ‚ûï 4. Th√™m user m·ªõi
    // ==========================
    const handleCreateUser = async () => {
        const email = prompt("Email:");
        const password = prompt("M·∫≠t kh·∫©u:");
        if (!email || !password) return;

        try {
            const res = await api.post("/users", {
                email,
                password,
                role: "driver",
            });
            toast.success("T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng ‚úÖ");
            setUsers([...users, res.data.data]);
        } catch (err: any) {
            if (err.response?.status === 409) toast.error("Email ƒë√£ t·ªìn t·∫°i!");
            else toast.error("Kh√¥ng th·ªÉ t·∫°o ng∆∞·ªùi d√πng ‚ùå");
        }
    };

    // ==========================
    // üîç L·ªçc user theo t·ª´ kh√≥a
    // ==========================
    const filteredUsers = users.filter(
        (u) =>
            u.id?.toLowerCase().includes(searchTerm.toLowerCase()) ||
            u.fullName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
            u.email?.toLowerCase().includes(searchTerm.toLowerCase())
    );

    // ==========================
    // üìÑ Hi·ªÉn th·ªã t√™n vai tr√≤ (t·ª´ roleId)
    // ==========================
    const getRoleName = (roleId: string) => {
        switch (roleId) {
            case "29cfa2e4-4264-4da5-9c39-ab0fa7f40599":
                return "Admin";
            case "df04443d-75f1-4ef4-a475-54627ddf2d8a":
                return "Staff";
            case "a0a2ba5c-e53a-4690-8521-bf9c2728a013":
                return "Driver";
            default:
                return "Unknown";
        }
    };

    // ==========================
    // üìÑ UI Render
    // ==========================
    return (
        <div className="p-6 space-y-6 min-h-screen">
            <h2 className="text-center text-2xl font-bold text-[#38A3A5]">
                Qu·∫£n l√Ω Ng∆∞·ªùi d√πng
            </h2>

            <div className="p-4 space-y-4">
                {/* Search */}
                <div className="flex items-center gap-2">
                    <div className="relative flex-1 max-w-xs">
                        <input
                            type="text"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            placeholder="Nh·∫≠p ID, t√™n ho·∫∑c email..."
                            className="border rounded pl-8 pr-2 py-1 w-full text-sm focus:outline-none focus:ring-2 focus:ring-green-300"
                        />
                        <FaSearch className="absolute left-2 top-1/2 -translate-y-1/2 text-gray-400" />
                    </div>

                    <Button
                        onClick={() => handleCreateUser()}
                        className="bg-[#38A3A5] text-white text-sm"
                    >
                        + Th√™m ng∆∞·ªùi d√πng
                    </Button>

                    <span className="ml-auto font-semibold text-sm">
                        S·ªë l∆∞·ª£ng: {filteredUsers.length}
                    </span>
                </div>

                {/* Table */}
                <div className="overflow-x-auto border rounded-lg">
                    <table className="min-w-full table-auto text-center border-collapse">
                        <thead className="bg-[#E6F7F7] text-[#38A3A5]">
                            <tr>
                                {[
                                    "STT",
                                    "ID",
                                    "H·ªç & T√™n",
                                    "Email",
                                    "Vai tr√≤",
                                    "Tr·∫°ng th√°i",
                                    "H√†nh ƒë·ªông",
                                ].map((header) => (
                                    <th key={header} className="border px-2 py-1">
                                        {header}
                                    </th>
                                ))}
                            </tr>
                        </thead>
                        <tbody>
                            {loading ? (
                                <tr>
                                    <td colSpan={7} className="py-4 text-gray-500">
                                        ƒêang t·∫£i d·ªØ li·ªáu...
                                    </td>
                                </tr>
                            ) : filteredUsers.length > 0 ? (
                                filteredUsers.map((u, idx) => (
                                    <tr key={u.id} className="border-b hover:bg-gray-100">
                                        <td className="px-2 py-1">{idx + 1}</td>
                                        <td className="px-2 py-1">{u.id?.slice(0, 8)}</td>
                                        <td className="px-2 py-1">{u.fullName || "‚Äî"}</td>
                                        <td className="px-2 py-1">{u.email}</td>
                                        <td className="px-2 py-1">{getRoleName(u.roleId)}</td>
                                        <td className="px-2 py-1">{u.status}</td>
                                        <td className="px-2 py-1 flex flex-row gap-2 justify-center">
                                            <button
                                                className="text-indigo-600 hover:underline"
                                                onClick={() => setSelectedUser(u)}
                                            >
                                                Xem chi ti·∫øt
                                            </button>
                                            <button
                                                className="text-green-600 hover:underline"
                                                onClick={() => handleUpdateProfile(u.id)}
                                            >
                                                C·∫≠p nh·∫≠t
                                            </button>
                                            <button
                                                className="text-red-600 hover:underline"
                                                onClick={() => handleDelete(u.id)}
                                            >
                                                X√≥a
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan={7} className="py-4 text-gray-500">
                                        Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ph√π h·ª£p
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                </div>
            </div>

            {/* Modal chi ti·∫øt */}
            <Dialog open={!!selectedUser} onOpenChange={() => setSelectedUser(null)}>
                <DialogContent className="sm:max-w-[500px] bg-white rounded-2xl shadow-lg">
                    <DialogHeader>
                        <DialogTitle>Th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng</DialogTitle>
                    </DialogHeader>

                    {selectedUser && (
                        <div className="mt-4 space-y-3 text-sm text-gray-700">
                            <p><strong>ID:</strong> {selectedUser.id}</p>
                            <p><strong>H·ªç & T√™n:</strong> {selectedUser.fullName || "‚Äî"}</p>
                            <p><strong>Email:</strong> {selectedUser.email}</p>
                            <p><strong>Vai tr√≤:</strong> {getRoleName(selectedUser.roleId)}</p>
                            <p><strong>Tr·∫°ng th√°i:</strong> {selectedUser.status}</p>
                            <p><strong>Ng√†y sinh:</strong> {selectedUser.dateOfBirth || "‚Äî"}</p>
                        </div>
                    )}
                </DialogContent>
            </Dialog>
        </div>
    );
}

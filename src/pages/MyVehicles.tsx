import { useEffect, useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";
import api from "@/lib/api";
import { useAuth } from "@/context/AuthContext";
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogDescription,
} from "@/components/ui/dialog";

interface Vehicle {
    id: string;
    licensePlates: string;
    name: string;
    VIN: string;
    status: string;
    userId: string;
    model?: {
        id: string;
        name: string;
        manufacturer?: string;
    };
}

export default function MyVehicles() {
    const { user } = useAuth();
    const navigate = useNavigate();
    const [vehicles, setVehicles] = useState<Vehicle[]>([]);
    const [selectedVehicle, setSelectedVehicle] = useState<Vehicle | null>(null);
    const [open, setOpen] = useState(false);
    const [loading, setLoading] = useState(true);

    //  L·∫•y danh s√°ch xe ng∆∞·ªùi d√πng hi·ªán t·∫°i
    const fetchVehicles = async () => {
        try {
            setLoading(true);
            const res = await api.get("/vehicles", { withCredentials: true });

            const data =
                res?.data?.data?.vehicles ||
                res?.data?.vehicles ||
                res?.data?.data ||
                [];

            if (!Array.isArray(data)) {
                throw new Error("Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ m√°y ch·ªß.");
            }

            const myVehicles = data.filter(
                (v: any) => v.userId === user?.id
            );

            console.log("Xe c·ªßa t√¥i:", myVehicles);
            setVehicles(myVehicles);
        } catch (err) {
            console.error(" L·ªói khi l·∫•y danh s√°ch xe:", err);
            // toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch xe!");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        if (user?.id) {
            fetchVehicles();
        }
    }, [user]);

    //  M·ªü modal xem chi ti·∫øt
    const handleViewDetails = (vehicles: Vehicle) => {
        setSelectedVehicle(vehicles);
        setOpen(true);
    };

    // üóëÔ∏è H·ªßy li√™n k·∫øt (X√≥a xe)
    const handleUnlinkVehicle = async (vehicleId: string) => {
        if (!vehicleId) return;
        if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy li√™n k·∫øt (x√≥a) xe n√†y kh√¥ng?")) return;

        try {
            const res = await api.delete(`/vehicles/${vehicleId}`, { withCredentials: true });

            if (res.data?.success) {
                toast.success(" Xe ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!");
                setOpen(false);
                fetchVehicles();
            } else {
                toast.error("Kh√¥ng th·ªÉ x√≥a xe! Vui l√≤ng th·ª≠ l·∫°i.");
            }
        } catch (err: any) {
            console.error(" L·ªói khi x√≥a xe:", err);
            if (err.response?.status === 404) {
                toast.error("Xe kh√¥ng t·ªìn t·∫°i!");
            } else {
                toast.error("ƒê√£ x·∫£y ra l·ªói m√°y ch·ªß khi x√≥a xe.");
            }
        }
    };


    return (
        <div className="flex h-screen bg-[#E9F8F8]">
            <main className="flex-1 p-8">
                <h1 className="text-3xl text-center font-semibold mb-6 text-[#38A3A5]">
                    Danh s√°ch xe c·ªßa t√¥i
                </h1>

                {/* Loading */}
                {loading && (
                    <div className="text-center text-gray-500 mt-10 animate-pulse">
                        ƒêang t·∫£i danh s√°ch xe...
                    </div>
                )}

                {/* N·∫øu ch∆∞a c√≥ xe */}
                {!loading && vehicles.length === 0 && (
                    <div className="flex flex-col items-center justify-center mt-16 text-center space-y-4">
                        <p className="text-gray-600 text-lg">B·∫°n ch∆∞a ƒëƒÉng k√Ω xe n√†o.</p>

                        <Button
                            onClick={() => navigate("/home/register-vehicle")}
                            className="bg-[#38A3A5] hover:bg-[#2C8C8E] text-white px-6 py-3 text-lg rounded-xl shadow-md transition-all"
                        >
                            + ƒêƒÉng k√Ω xe ngay
                        </Button>
                    </div>
                )}

                {/* Danh s√°ch xe */}
                {!loading && vehicles.length > 0 && (
                    <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {vehicles.map((v) => (
                            <Card
                                key={v.id}
                                className="p-5 bg-white/80 border border-[#BCE7E8] shadow-md hover:shadow-lg transition-all duration-300"
                            >
                                <div className="space-y-2">
                                    <h2 className="text-xl font-semibold text-[#38A3A5]">
                                        {v.name}
                                    </h2>
                                    <p className="text-sm text-gray-600">
                                        Bi·ªÉn s·ªë: {v.licensePlates}
                                    </p>
                                    <p className="text-sm text-gray-600">
                                        Model: {v.model?.name || "Kh√¥ng r√µ"}
                                    </p>
                                    <p className="text-sm text-gray-600 truncate">
                                        S·ªë khung (VIN): {v.VIN}
                                    </p>
                                    <p
                                        className={`text-sm font-medium ${v.status === "active"
                                            ? "text-green-600"
                                            : v.status === "pending"
                                                ? "text-yellow-600"
                                                : "text-red-600"
                                            }`}
                                    >
                                        Tr·∫°ng th√°i:{" "}
                                        {v.status === "pending"
                                            ? "ƒêang ch·ªù duy·ªát"
                                            : v.status === "active"
                                                ? "ƒê√£ duy·ªát"
                                                : "T·ª´ ch·ªëi"}
                                    </p>
                                </div>

                                <div className="flex justify-end mt-4">
                                    <Button
                                        variant="outline"
                                        className="text-[#38A3A5] border-[#38A3A5] hover:bg-[#38A3A5] hover:text-white transition-all"
                                        onClick={() => handleViewDetails(v)}
                                    >
                                        Qu·∫£n L√Ω
                                    </Button>
                                </div>
                            </Card>
                        ))}
                    </div>
                )}

                {/* Modal xem chi ti·∫øt */}
                <Dialog open={open} onOpenChange={setOpen}>
                    <DialogContent className="max-w-md bg-white rounded-2xl">
                        <DialogHeader>
                            <DialogTitle className="text-[#38A3A5] text-lg">
                                Chi ti·∫øt xe
                            </DialogTitle>
                            <DialogDescription>
                                Th√¥ng tin chi ti·∫øt v·ªÅ xe b·∫°n ƒë√£ ƒëƒÉng k√Ω
                            </DialogDescription>
                        </DialogHeader>

                        {selectedVehicle && (
                            <div className="space-y-3 mt-3">
                                <div>
                                    <Label className="text-[#38A3A5]">T√™n:</Label>
                                    <p>{selectedVehicle.name}</p>
                                </div>
                                <div>
                                    <Label className="text-[#38A3A5]">Bi·ªÉn s·ªë:</Label>
                                    <p>{selectedVehicle.licensePlates}</p>
                                </div>
                                <div>
                                    <Label className="text-[#38A3A5]">Model:</Label>
                                    <p>{selectedVehicle.model?.name || "Kh√¥ng r√µ"}</p>
                                </div>
                                <div>
                                    <Label className="text-[#38A3A5]">S·ªë khung (VIN):</Label>
                                    <p>{selectedVehicle.VIN}</p>
                                </div>
                                <div>
                                    <Label className="text-[#38A3A5]">Tr·∫°ng th√°i:</Label>
                                    <p>
                                        {selectedVehicle.status === "pending"
                                            ? "ƒêang ch·ªù duy·ªát"
                                            : selectedVehicle.status === "active"
                                                ? "ƒê√£ duy·ªát"
                                                : "T·ª´ ch·ªëi"}
                                    </p>
                                </div>
                            </div>
                        )}

                        <div className="flex justify-between mt-6">
                            <Button
                                onClick={() => {
                                    console.log(
                                        "üü¶ C·∫≠p nh·∫≠t xe ƒë∆∞·ª£c ch·ªçn:",
                                        selectedVehicle?.id
                                    );
                                    if (selectedVehicle?.id) {
                                        navigate(`/home/update-vehicle/${selectedVehicle.id}`);
                                    } else {
                                        toast.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin xe ƒë·ªÉ c·∫≠p nh·∫≠t.");
                                    }
                                }}
                                className="bg-[#38A3A5] hover:bg-[#2C8C8E] text-white"
                            >
                                C·∫≠p nh·∫≠t
                            </Button>

                            <Button
                                onClick={() => handleUnlinkVehicle(selectedVehicle?.id!)}
                                className="bg-red-500 hover:bg-red-600 text-white"
                            >
                                H·ªßy li√™n k·∫øt
                            </Button>
                        </div>

                    </DialogContent>
                </Dialog>
            </main>
        </div>
    );
}
